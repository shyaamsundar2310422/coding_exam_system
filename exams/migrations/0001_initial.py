# Generated by Django 4.2.7 on 2025-08-29 16:40

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration', models.IntegerField(help_text='Duration in minutes')),
                ('max_participants', models.IntegerField(default=1000)),
                ('current_participants', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('contest_type', models.CharField(choices=[('practice', 'Practice'), ('timed', 'Timed Contest'), ('tournament', 'Tournament'), ('challenge', 'Challenge')], default='timed', max_length=20)),
                ('is_public', models.BooleanField(default=True)),
                ('registration_required', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('time_remaining', models.IntegerField()),
                ('time_spent', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_submitted', models.BooleanField(default=False)),
                ('score', models.IntegerField(default=0)),
                ('contest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='exams.contest')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('problem_statement', models.TextField(blank=True, default='', help_text='Detailed problem description')),
                ('input_format', models.TextField(blank=True, default='', help_text='Input format description')),
                ('output_format', models.TextField(blank=True, default='', help_text='Output format description')),
                ('constraints', models.TextField(blank=True, default='', help_text='Problem constraints')),
                ('sample_input', models.TextField(blank=True, default='', help_text='Sample input examples')),
                ('sample_output', models.TextField(blank=True, default='', help_text='Sample output examples')),
                ('explanation', models.TextField(blank=True, default='', help_text='Solution explanation')),
                ('initial_code', models.TextField()),
                ('solution_code', models.TextField(blank=True, default='', help_text='Reference solution')),
                ('time_limit', models.IntegerField(default=300, help_text='Time limit in seconds')),
                ('memory_limit', models.IntegerField(default=512, help_text='Memory limit in MB')),
                ('difficulty_score', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('points', models.IntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_submissions', models.IntegerField(default=0)),
                ('successful_submissions', models.IntegerField(default=0)),
                ('acceptance_rate', models.FloatField(default=0.0)),
            ],
            options={
                'ordering': ['difficulty_score', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProblemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('points', models.IntegerField(default=10)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('language', models.CharField(default='javascript', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('accepted', 'Accepted'), ('wrong_answer', 'Wrong Answer'), ('time_limit_exceeded', 'Time Limit Exceeded'), ('memory_limit_exceeded', 'Memory Limit Exceeded'), ('runtime_error', 'Runtime Error'), ('compilation_error', 'Compilation Error'), ('internal_error', 'Internal Error')], default='pending', max_length=25)),
                ('test_results', models.JSONField(default=dict)),
                ('execution_time', models.FloatField(blank=True, null=True)),
                ('memory_used', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(default=0)),
                ('points_earned', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('contest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='exams.contest')),
                ('exam_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='exams.examsession')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='exams.problem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('input_data', models.JSONField()),
                ('expected_output', models.JSONField()),
                ('is_hidden', models.BooleanField(default=False)),
                ('is_sample', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=1)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='exams.problem')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('rating', models.IntegerField(default=1200)),
                ('total_submissions', models.IntegerField(default=0)),
                ('problems_solved', models.IntegerField(default=0)),
                ('contests_participated', models.IntegerField(default=0)),
                ('rank', models.CharField(default='Beginner', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_data', models.JSONField()),
                ('expected_output', models.JSONField()),
                ('actual_output', models.JSONField(blank=True, null=True)),
                ('is_passed', models.BooleanField(default=False)),
                ('execution_time', models.FloatField(blank=True, null=True)),
                ('memory_used', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('points_earned', models.IntegerField(default=0)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results_detail', to='exams.submission')),
                ('test_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.testcase')),
            ],
            options={
                'ordering': ['test_case__order'],
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='exams.problemcategory'),
        ),
        migrations.AddField(
            model_name='problem',
            name='contest',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='exams.contest'),
        ),
        migrations.AddField(
            model_name='problem',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='problems_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='examsession',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='exams.problem'),
        ),
        migrations.AddField(
            model_name='examsession',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DiscussionReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_solution', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('discussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='exams.discussion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussion_replies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='discussion',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='exams.problem'),
        ),
        migrations.AddField(
            model_name='discussion',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.IntegerField(default=0)),
                ('problems_solved', models.IntegerField(default=0)),
                ('total_time', models.IntegerField(default=0, help_text='Total time in seconds')),
                ('rank', models.IntegerField()),
                ('last_submission', models.DateTimeField(auto_now=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboards', to='exams.contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['rank', '-total_score', 'total_time'],
                'unique_together': {('contest', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ContestParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('score', models.IntegerField(default=0)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='exams.contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score', 'joined_at'],
                'unique_together': {('contest', 'user')},
            },
        ),
    ]
